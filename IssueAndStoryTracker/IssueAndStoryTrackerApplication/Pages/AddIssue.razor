@page "/AddIssue"
@using IssueAndStoryTrackerApplication.Data
@inject IssueService issueService
@inject NavigationManager navigationManager

<h2>Add Issue</h2>
<hr />

<EditForm Model="@issue" OnValidSubmit="CreateIssue">
  <DataAnnotationsValidator />
  <ValidationSummary />
  
  <div class="row">
    <div class="col-md-8">
      
      <!-- Title input -->
      <div class="form-group">
        <label for="Title" class="control-label">Title</label>
        <input form="Title" class="form-control" @bind="@issue.Title" />
      </div>

      <!-- Associated Product input -->
      <div class="form-group">
        <label for="Product" class="control-label">Associated Product</label>
        <select name="Product" class="form-control" @bind="@issue.AssociatedProduct">
          <option value="">-- Select Associated Product --</option>
          @foreach ( string product in products )
          {
            <option value="@product">@product</option>
          }
        </select>
      </div>

      <!-- Affected Product input -->
      <div class="form-group">
        <label for="AffectedProductVersion" class="control-label">Affected Product Version</label>
        <input form="AffectedProductVersion" class="form-control" @bind="@issue.AffectedProductVersion" />
      </div>

      <!-- Work Category input -->
      <div class="form-group">
        <label for="Type" class="control-label">Work Category</label>
        <select name="Type" class="form-control" @bind="@issue.WorkProductType">
          <option value="">-- Select Work Category --</option>
          @foreach ( string workCategory in workCategories )
          {
            <option value="@workCategory">@workCategory</option>
          }
        </select>
      </div>

      <!-- Found By input -->
      <div class="form-group">
        <label for="FoundBy" class="control-label">Found By</label>
        <input form="FoundBy" class="form-control" @bind="@issue.FoundBy" />
      </div>

      <!-- Observed Behavior input -->
      <div class="form-group">
        <label for="ObservedBehavior" class="control-label">Observed Behavior</label>
        <input form="ObservedBehavior" class="form-control" @bind="@issue.ObservedBehavior" />
      </div>

      <!-- Expected Behavior input -->
      <div class="form-group">
        <label for="ExpectedBehavior" class="control-label">Expected Behavior</label>
        <input form="ExpectedBehavior" class="form-control" @bind="@issue.ExpectedBehavior" />
      </div>

      <!-- Estimated Points input -->
      <div class="form-group">
        <label for="Points" class="control-label">Estimated Points</label>
        <input form="Points" class="form-control" @bind="@issue.EstimatedPoints" />
      </div>
    </div>
  </div>

  <!-- Create Issue button -->
  <div class="row">
    <div class="col-md-4">
      <div class="form-group">
        <button type="submit">Create Issue</button>        
      </div>
    </div>
  </div>
</EditForm>

@code {

  /// <summary>
  /// Contains the data for an issue object that we're going to create.
  /// </summary>
  IssueInfo issue = new IssueInfo();

  /// <summary>
  /// Collection of products that can be associated with an issue.
  /// </summary>
  List<string> products = new List<string>();

  /// <summary>
  /// Collection of work categories that can be associated with an issue.
  /// </summary>
  List<string> workCategories = new List<string>();
  
  /// <summary>
  /// This method is responsible for calling upon the issue service to create an issue.
  /// </summary>
  protected void CreateIssue()
  {
    issueService.Create( issue );
    navigationManager.NavigateTo( "Issue" );
  }

  /// <summary>
  /// Obtains a collection of products that can be associated with a story.  
  /// </summary>  
  protected override async Task OnInitializedAsync()
  {
    products = await Task.Run( () => issueService.GetProductNames() );
    workCategories = await Task.Run( () => issueService.GetWorkCategories() );
  }
}